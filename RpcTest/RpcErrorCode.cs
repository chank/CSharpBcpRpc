// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 0219
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Qifun.BcpRpc.Test {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class RpcErrorCode {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Qifun_BcpRpc_Test_RpcTestException__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Qifun.BcpRpc.Test.RpcTestException, global::Qifun.BcpRpc.Test.RpcTestException.Builder> internal__static_Qifun_BcpRpc_Test_RpcTestException__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RpcErrorCode() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJScGNFcnJvckNvZGUucHJvdG8SEVFpZnVuLkJjcFJwYy5UZXN0IkYKEFJw" + 
          "Y1Rlc3RFeGNlcHRpb24SMgoEY29kZRgBIAEoDjIkLlFpZnVuLkJjcFJwYy5U" + 
          "ZXN0LlJwY1Rlc3RFcnJvckNvZGVzKi8KEVJwY1Rlc3RFcnJvckNvZGVzEgwK" + 
          "CEVycm9yT25lEAESDAoIRXJyb3JUd28QAg==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qifun_BcpRpc_Test_RpcTestException__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qifun_BcpRpc_Test_RpcTestException__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Qifun.BcpRpc.Test.RpcTestException, global::Qifun.BcpRpc.Test.RpcTestException.Builder>(internal__static_Qifun_BcpRpc_Test_RpcTestException__Descriptor,
                new string[] { "Code", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum RpcTestErrorCodes {
    ErrorOne = 1,
    ErrorTwo = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RpcTestException : pb::GeneratedMessage<RpcTestException, RpcTestException.Builder> {
    private RpcTestException() { }
    private static readonly RpcTestException defaultInstance = new RpcTestException().MakeReadOnly();
    private static readonly string[] _rpcTestExceptionFieldNames = new string[] { "code" };
    private static readonly uint[] _rpcTestExceptionFieldTags = new uint[] { 8 };
    public static RpcTestException DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcTestException DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcTestException ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Qifun.BcpRpc.Test.RpcErrorCode.internal__static_Qifun_BcpRpc_Test_RpcTestException__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcTestException, RpcTestException.Builder> InternalFieldAccessors {
      get { return global::Qifun.BcpRpc.Test.RpcErrorCode.internal__static_Qifun_BcpRpc_Test_RpcTestException__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::Qifun.BcpRpc.Test.RpcTestErrorCodes code_ = global::Qifun.BcpRpc.Test.RpcTestErrorCodes.ErrorOne;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::Qifun.BcpRpc.Test.RpcTestErrorCodes Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcTestExceptionFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RpcTestException ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcTestException ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcTestException ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcTestException ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcTestException ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcTestException ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcTestException ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcTestException ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcTestException ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcTestException ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcTestException MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcTestException prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RpcTestException, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcTestException cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcTestException result;
      
      private RpcTestException PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcTestException original = result;
          result = new RpcTestException();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcTestException MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Qifun.BcpRpc.Test.RpcTestException.Descriptor; }
      }
      
      public override RpcTestException DefaultInstanceForType {
        get { return global::Qifun.BcpRpc.Test.RpcTestException.DefaultInstance; }
      }
      
      public override RpcTestException BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcTestException) {
          return MergeFrom((RpcTestException) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcTestException other) {
        if (other == global::Qifun.BcpRpc.Test.RpcTestException.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcTestExceptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcTestExceptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::Qifun.BcpRpc.Test.RpcTestErrorCodes Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::Qifun.BcpRpc.Test.RpcTestErrorCodes value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::Qifun.BcpRpc.Test.RpcTestErrorCodes.ErrorOne;
        return this;
      }
    }
    static RpcTestException() {
      object.ReferenceEquals(global::Qifun.BcpRpc.Test.RpcErrorCode.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
